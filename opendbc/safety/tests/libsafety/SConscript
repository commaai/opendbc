env = Environment(
  CC='gcc',
  CFLAGS=[
    '-Wall',
    "-Wextra",
    '-Werror',
    '-nostdlib',
    '-fno-builtin',
    '-std=gnu11',
    '-Wfatal-errors',
    '-Wno-pointer-to-int-cast',
  ],
  CPPPATH=[".", "../../board/", "../../"],
)

if GetOption('mutation'):
  env['CC'] = 'clang-17'
  flags = [
    '-fprofile-instr-generate',
    '-fcoverage-mapping',
    '-fpass-plugin=/usr/lib/mull-ir-frontend-17',
    '-g',
    '-grecord-command-line',
  ]
  env['CFLAGS'] += flags
  env['LINKFLAGS'] += flags

if GetOption('ubsan'):
  flags = [
    "-fsanitize=undefined",
    "-fno-sanitize-recover=undefined",
  ]
  env['CFLAGS'] += flags
  env['LINKFLAGS'] += flags

safety = env.SharedObject("safety.os", "safety.c")
libsafety = env.SharedLibrary("libsafety.so", [safety])

if GetOption('coverage'):
  env.Append(
    CFLAGS=["-fprofile-arcs", "-ftest-coverage", "-fprofile-abs-path",],
    LIBS=["gcov"],
  )
  # GCC note file is generated by compiler, ensure we build it, and allow scons to clean it up
  AlwaysBuild(safety)
  env.SideEffect("safety.gcno", safety)
